'use strict';

module.exports = {
  name: 'IterationStatement',
  conditions: [''],
  rules: ['do Statement while LeftParenthesis Expression_In RightParenthesis ;', 'while LeftParenthesis Expression_In RightParenthesis Statement', 'for LeftParenthesis LexicalDeclaration Expression_In ; Expression_In RightParenthesis Statement', 'for LeftParenthesis VAR VariableDeclarationList ; Expression_In ; Expression_In RightParenthesis Statement', 'for LeftParenthesis LeftHandSideExpression in Expression_In RightParenthesis Statement', 'for LeftParenthesis ForDeclaration in Expression_In RightParenthesis Statement', 'for LeftParenthesis LeftHandSideExpression of AssignmentExpression_In RightParenthesis Statement', 'for LeftParenthesis VAR ForBinding of AssignmentExpression_In RightParenthesis Statement', 'for LeftParenthesis ForDeclaration of AssignmentExpression_In RightParenthesis Statement', 'for LeftParenthesis Expression ; Expression_In ; Expression_In RightParenthesis Statement', 'for LeftParenthesis Expression ; ; Expression_In RightParenthesis Statement', 'for LeftParenthesis Expression ; ; RightParenthesis Statement', 'for LeftParenthesis Expression ; Expression_In ; RightParenthesis Statement', 'for LeftParenthesis ; Expression_In ; Expression_In RightParenthesis Statement', 'for LeftParenthesis ; ; Expression_In RightParenthesis Statement', 'for LeftParenthesis ; ; RightParenthesis Statement', 'for LeftParenthesis ; Expression_In ; RightParenthesis Statement', 'for LeftParenthesis VAR VariableDeclarationList ; ; Expression_In RightParenthesis Statement', 'for LeftParenthesis VAR VariableDeclarationList ; Expression_In ; RightParenthesis Statement', 'for LeftParenthesis VAR VariableDeclarationList ; ; RightParenthesis Statement', 'for LeftParenthesis LexicalDeclaration ; Expression_In RightParenthesis Statement', 'for LeftParenthesis LexicalDeclaration Expression_In ; RightParenthesis Statement', 'for LeftParenthesis LexicalDeclaration ; RightParenthesis Statement', 'for LeftParenthesis VAR ForBinding in Expression_In RightParenthesis Statement'],
  handlers: ['$$ = new (require(\'./ast/IterationStatement\').DoWhileStatementNode)($5, $2, { loc: this._$, yy })', '$$ = new (require(\'./ast/IterationStatement\').WhileStatementNode)($3, $5, { loc: this._$, yy })', '\n      require(\'./ast/IterationStatement\').checkForAutoSemicolonInsertion(yy, @5, null, yy.lexer.yylloc);\n      $$ = new (require(\'./ast/IterationStatement\').ForStatementNode)($3, $4, $6, $8, { loc: this._$, yy })\n    ', '\n      require(\'./ast/IterationStatement\').checkForAutoSemicolonInsertion(yy, @5, @7, yy.lexer.yylloc);\n      $$ = new (require(\'./ast/IterationStatement\').ForStatementNode)(\n        // NOTICE:\n        // we need to merge the VAR\'s loc and VariableDeclarator\'s to get VaribleStatement\'s range\n        // var a = 100\n        // VaribleStatement\' range is [0, 9]\n        // VariableDeclarator\'s range is [4, 9]\n        // $4 is an array of VariableDeclarator, we need the last one\'s range\n        new (require(\'./ast/VariableStatement\').VariableStatementNode)($4, { loc: {\n          first_line: $3.first_line,\n          last_line: $4[$4.length-1].lastLine,\n          first_column: $3.firts_column,\n          last_column:  $4[$4.length-1].lastColumnu,\n          range: [$3.range[0], $4[$4.length-1].range[1]],\n        }, yy }), $6, $8, $10, { loc: this._$, yy });\n    ', '\n      $$ = new (require(\'./ast/IterationStatement\').ForInStatementNode)($3, $5, $7, { loc: this._$, yy })\n    ', '\n      $$ = new (require(\'./ast/IterationStatement\').ForInStatementNode)($3, $5, $7, { loc: this._$, yy })\n    ', '\n      $$ = new (require(\'./ast/IterationStatement\').ForOfStatementNode)($3, $5, $7, { loc: this._$, yy })\n    ', '\n      $$ = new (require(\'./ast/IterationStatement\').ForOfStatementNode)(\n        // NOTICE:\n        // we need to merge the VAR\'s loc and VariableDeclarator\'s to get VaribleStatement\'s range\n        // $4 is a single VariableDeclarator\n        new (require(\'./ast/VariableStatement\').VariableStatementNode)([$4], { loc: {\n          first_line: $3.first_line,\n          last_line: $4.lastLine,\n          first_column: $3.firts_column,\n          last_column:  $4.lastColumnu,\n          range: [$3.range[0], $4.range[1]],\n        }, yy }), $6, $8, { loc: this._$, yy });\n    ', '\n      $$ = new (require(\'./ast/IterationStatement\').ForOfStatementNode)($3, $5, $7, { loc: this._$, yy })\n    ', '\n      require(\'./ast/IterationStatement\').checkForAutoSemicolonInsertion(yy, @4, @6);\n      $$ = new (require(\'./ast/IterationStatement\').ForStatementNode)($3, $5, $7, $9, { loc: this._$, yy })\n    ', '\n      require(\'./ast/IterationStatement\').checkForAutoSemicolonInsertion(yy, @4, @5);\n      $$ = new (require(\'./ast/IterationStatement\').ForStatementNode)($3, null, $6, $8, { loc: this._$, yy })\n    ', '\n      require(\'./ast/IterationStatement\').checkForAutoSemicolonInsertion(yy, @4, @5);\n      $$ = new (require(\'./ast/IterationStatement\').ForStatementNode)($3, null, null, $7, { loc: this._$, yy })\n    ', '\n      require(\'./ast/IterationStatement\').checkForAutoSemicolonInsertion(yy, @4, @6);\n      $$ = new (require(\'./ast/IterationStatement\').ForStatementNode)($3, $5, null, $8, { loc: this._$, yy })\n    ', '\n      require(\'./ast/IterationStatement\').checkForAutoSemicolonInsertion(yy, @3, @5);\n      $$ = new (require(\'./ast/IterationStatement\').ForStatementNode)(null, $4, $6, $8, { loc: this._$, yy })\n    ', '\n      require(\'./ast/IterationStatement\').checkForAutoSemicolonInsertion(yy, @3, @4);\n      $$ = new (require(\'./ast/IterationStatement\').ForStatementNode)(null, null, $5, $7, { loc: this._$, yy })\n    ', '\n      require(\'./ast/IterationStatement\').checkForAutoSemicolonInsertion(yy, @3, @4);\n      $$ = new (require(\'./ast/IterationStatement\').ForStatementNode)(null, null, null, $6, { loc: this._$, yy })\n    ', '\n      require(\'./ast/IterationStatement\').checkForAutoSemicolonInsertion(yy, @3, @5);\n      $$ = new (require(\'./ast/IterationStatement\').ForStatementNode)(null, $4, null, $7, { loc: this._$, yy })\n    ', '\n      require(\'./ast/IterationStatement\').checkForAutoSemicolonInsertion(yy, @5, @6);\n      $$ = new (require(\'./ast/IterationStatement\').ForStatementNode)(\n        new (require(\'./ast/VariableStatement\').VariableStatementNode)($4, { loc: {\n          first_line: $3.first_line,\n          last_line: $4[$4.length-1].lastLine,\n          first_column: $3.firts_column,\n          last_column:  $4[$4.length-1].lastColumnu,\n          range: [$3.range[0], $4[$4.length-1].range[1]],\n        }, yy }), null, $7, $9, { loc: this._$, yy });\n    ', '\n      require(\'./ast/IterationStatement\').checkForAutoSemicolonInsertion(yy, @5, @6);\n      $$ = new (require(\'./ast/IterationStatement\').ForStatementNode)(\n        new (require(\'./ast/VariableStatement\').VariableStatementNode)($4, { loc: {\n          first_line: $3.first_line,\n          last_line: $4[$4.length-1].lastLine,\n          first_column: $3.firts_column,\n          last_column:  $4[$4.length-1].lastColumnu,\n          range: [$3.range[0], $4[$4.length-1].range[1]],\n        }, yy }), $6, null, $9, { loc: this._$, yy });\n    ', '\n      require(\'./ast/IterationStatement\').checkForAutoSemicolonInsertion(yy, @5, @6);\n      $$ = new (require(\'./ast/IterationStatement\').ForStatementNode)(\n        new (require(\'./ast/VariableStatement\').VariableStatementNode)($4, { loc: {\n          first_line: $3.first_line,\n          last_line: $4[$4.length-1].lastLine,\n          first_column: $3.firts_column,\n          last_column:  $4[$4.length-1].lastColumnu,\n          range: [$3.range[0], $4[$4.length-1].range[1]],\n        }, yy }), null, null, $8, { loc: this._$, yy });\n    ', '\n      require(\'./ast/IterationStatement\').checkForAutoSemicolonInsertion(yy, @4, null);\n      $$ = new (require(\'./ast/IterationStatement\').ForStatementNode)($3, null, $5, $7, { loc: this._$, yy })\n    ', '\n      require(\'./ast/IterationStatement\').checkForAutoSemicolonInsertion(yy, @5, null);\n      $$ = new (require(\'./ast/IterationStatement\').ForStatementNode)($3, $4, null, $7, { loc: this._$, yy })\n    ', '\n      require(\'./ast/IterationStatement\').checkForAutoSemicolonInsertion(yy, @5, null);\n      $$ = new (require(\'./ast/IterationStatement\').ForStatementNode)($3, null, null, $6, { loc: this._$, yy })\n    ', '\n      $$ = new (require(\'./ast/IterationStatement\').ForInStatementNode)(\n        // NOTICE:\n        // we need to merge the VAR\'s loc and VariableDeclarator\'s to get VaribleStatement\'s range\n        // $4 is a single VariableDeclarator\n        new (require(\'./ast/VariableStatement\').VariableStatementNode)([$4], { loc: {\n          first_line: $3.first_line,\n          last_line: $4.lastLine,\n          first_column: $3.firts_column,\n          last_column:  $4.lastColumnu,\n          range: [$3.range[0], $4.range[1]],\n        }, yy }), $6, $8, { loc: this._$, yy });\n    '],
  subRules: [require('./Expression_In'), require('./Statement'), require('./LexicalDeclaration'), require('./VariableDeclarationList'), require('./LeftHandSideExpression'), require('./ForDeclaration'), require('./AssignmentExpression_In'), require('./ForBinding'), require('./Expression'), require('./LeftParenthesis'), require('./RightParenthesis'), require('./Var')]
};